/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GovernmentWorkArea;

import Database.DatabaseConnection;
import LandingUI.MainJFrame;
import LandingUI.MenuPH;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.awt.*;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/**
 *
 * @author Abhinav Uni
 */
public final class DashboardJPanel extends javax.swing.JPanel {
    
    private MainJFrame mainframe;
    private int selectedNUID;

    /**
     * Creates new form DashboardJPanel
     */
    public DashboardJPanel(MainJFrame mainframe,int selectedNUID) {
        initComponents();
        
        this.mainframe = mainframe;
        this.selectedNUID = selectedNUID;
        txttaxcollected.setText(String.valueOf(getSumOfTaxCalculated()));
        txtemergency.setText(String.valueOf(getSumOfTaxCalculated() * 0.1));
        txtpopulation.setText(String.valueOf(getCitizenCount()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backbtn2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txttaxcollected = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtpopulation = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtemergency = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));

        backbtn2.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        backbtn2.setForeground(new java.awt.Color(255, 255, 255));
        backbtn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow.png"))); // NOI18N
        backbtn2.setText("Home");
        backbtn2.setBorder(null);
        backbtn2.setBorderPainted(false);
        backbtn2.setContentAreaFilled(false);
        backbtn2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backbtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtn2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Total Tax Collected ");

        txttaxcollected.setFont(new java.awt.Font("Segoe UI Black", 1, 34)); // NOI18N
        txttaxcollected.setBorder(null);
        txttaxcollected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttaxcollectedActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Population");

        txtpopulation.setFont(new java.awt.Font("Segoe UI Black", 1, 34)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tax Paid for Departments");

        jButton1.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 204, 0));
        jButton1.setText("View Chart");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("How's budget allocated within government");

        jButton2.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jButton2.setForeground(new java.awt.Color(204, 204, 0));
        jButton2.setText("View Chart");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Emergency fund available");

        txtemergency.setFont(new java.awt.Font("Segoe UI Black", 1, 34)); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/US logo.png"))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 1, 55)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("United States Government");

        jLabel9.setFont(new java.awt.Font("Segoe UI Variable", 3, 21)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 0));
        jLabel9.setText("Department of Financial Affairs, Washington DC");

        jLabel10.setFont(new java.awt.Font("Segoe UI Variable", 1, 8)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Please report any critical incidents that may be  challenging the peace and justice of the country. These incidents include, and are not limited to, problems in providing Healthcare,");

        jLabel11.setFont(new java.awt.Font("Segoe UI Variable", 1, 8)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Education, Safety and basic utilities to the citizens of the United States. Everybody is expected to abide by the constitution regardless of the position.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(backbtn2)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(txttaxcollected, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(txtpopulation, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(114, 114, 114)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtemergency, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)))))
                .addContainerGap(581, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backbtn2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txttaxcollected, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpopulation, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtemergency, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(262, 262, 262))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backbtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtn2ActionPerformed
        // TODO add your handling code here:

        GovernmentLandingJPanel govtland = new GovernmentLandingJPanel(mainframe,selectedNUID);
        mainframe.setRightComponent(govtland);
        MenuPH placeholder = new MenuPH(mainframe);
        mainframe.setLeftComponent(placeholder);

    }//GEN-LAST:event_backbtn2ActionPerformed
    
    public int getCitizenCount() {
        int citizenCount = 0;

        String sql = "SELECT COUNT(*) AS citizen_count FROM users WHERE role = 'Citizen'";
         Connection connection = (Connection) DatabaseConnection.getConnection();
        try (PreparedStatement statement = (PreparedStatement) connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

            if (resultSet.next()) {
                citizenCount = resultSet.getInt("citizen_count");
            }

        } catch (SQLException e) {
            // Handle SQLException
            e.printStackTrace();
        }

        return citizenCount;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // How many people have paid taxes?
         DefaultPieDataset dataset = new DefaultPieDataset();
        String sql = "SELECT type, SUM(amount) AS total_tax FROM tax GROUP BY type";
          Connection connection = (Connection) DatabaseConnection.getConnection();
        try (PreparedStatement statement = (PreparedStatement) connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                String department = resultSet.getString("type");
                double totalTax = resultSet.getDouble("total_tax");

                // Add data to the dataset
                dataset.setValue(department, totalTax);
            }

        } catch (SQLException e) {
            // Handle SQLException
            e.printStackTrace();
        }

        // Display the pie chart
        ChartUtils.showPieChart("Total Taxes Paid by Department", dataset);
    
    }//GEN-LAST:event_jButton1ActionPerformed
   
    private static JFreeChart createLineChart(DefaultCategoryDataset dataset) {
          JFreeChart chart = ChartFactory.createLineChart(
                "Complaints for each Department",
                "Ministry",
                "Number of Complaints",
                dataset
        );

        CategoryPlot plot = chart.getCategoryPlot();
        LineAndShapeRenderer renderer = new LineAndShapeRenderer();
        plot.setRenderer(renderer);

        return chart;
    }
    
    private static CategoryDataset createYourCategoryDatasetFromDB() throws SQLException {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

          Connection connection = (Connection) DatabaseConnection.getConnection();
            String sql = "SELECT budgetid, enterprise, organisation, budgetpercentageallocated, budgetamountallocated FROM organisation";
            try (PreparedStatement statement = (PreparedStatement) connection.prepareStatement(sql)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        double budgetAmountAllocated = resultSet.getDouble("budgetamountallocated");
                        String enterprise = resultSet.getString("enterprise");
                        String name = resultSet.getString("organisation");

                        // Adjust the dataset.addValue method based on the appropriate data type
                        dataset.addValue(budgetAmountAllocated, enterprise, name);
                    }
                }
            } catch (SQLException e) {
                // Handle SQLException
                e.printStackTrace();
            } catch (NumberFormatException e) {
                // Handle NumberFormatException
                e.printStackTrace();
            }

              return dataset;
        } 
    
    
    public static double getSumOfTaxCalculated() {
        double sum = 0;

        try {
             Connection connection = (Connection) DatabaseConnection.getConnection();
            String sql = "SELECT taxcalculated FROM tax";
            PreparedStatement preparedStatement = (PreparedStatement) connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                sum += Double.parseDouble(resultSet.getString("taxcalculated"));
            }

            resultSet.close();
            preparedStatement.close();
        
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle SQLException as needed
        }

        return sum;
    }
    

       

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // How's budget allocated within government
        CategoryDataset dataset = null;
        try {
            dataset = createYourCategoryDatasetFromDB(); // Implement your own method to create the dataset
        } catch (SQLException ex) {
            Logger.getLogger(DashboardJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        ChartUtils.showBarChart("Budget Allocation Chart", "Categories", "Values", dataset);
    }//GEN-LAST:event_jButton2ActionPerformed
      private static XYSeries createComplaintsDataset() {
          XYSeries series = new XYSeries("Number of Complaints");
          DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Assuming DatabaseConnection.getConnection() returns a valid database connection
        Connection connection = (Connection) DatabaseConnection.getConnection();

        // Query to get the count of complaints for each ministry
        String sql = "SELECT ministry, COUNT(*) AS num_complaints FROM complaints GROUP BY ministry";

        try (PreparedStatement statement = (PreparedStatement) connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

              while (resultSet.next()) {
                String ministry = resultSet.getString("ministry");
                int numComplaints = resultSet.getInt("num_complaints");

                // Add data to the dataset
                dataset.addValue(numComplaints, "Number of Complaints", ministry);
            }

        } catch (SQLException e) {
            // Handle SQLException
            e.printStackTrace();
        }

        return series;
    }
      
        
    private void txttaxcollectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttaxcollectedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttaxcollectedActionPerformed

    private CategoryDataset createYourCategoryDataset() {
        // Implement this method to create the dataset for the bar chart
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        // Add data to the dataset (e.g., dataset.addValue(100, "Category 1", "Value 1");)
        return dataset;
    }

    private XYSeries createEmergencyFundDataset() {
        XYSeries series = new XYSeries("Emergency Fund Usage");

    // Replace this with your actual logic to retrieve or calculate the allocated budget
    double allocatedBudget = getAllocatedBudget(); // Implement this method

    // Assuming 10% of the allocated budget goes to the emergency fund
    double emergencyFundUsage = 0.1 * allocatedBudget;

    // Add data points to the series
    series.add(1, emergencyFundUsage); // You can use different x values for different time periods

    return series;
    }
    
    private double getAllocatedBudget() {
    // Implement this method to retrieve or calculate the allocated budget
    // Replace the following line with your actual logic
    return 100000.0; // Example: Return a hardcoded budget for demonstration
}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbtn2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtemergency;
    private javax.swing.JTextField txtpopulation;
    private javax.swing.JTextField txttaxcollected;
    // End of variables declaration//GEN-END:variables

    private JFreeChart createLineChart(XYSeries dataset) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    
}
