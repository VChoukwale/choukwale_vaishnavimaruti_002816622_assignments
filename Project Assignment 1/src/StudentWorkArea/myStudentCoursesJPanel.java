/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package StudentWorkArea;

import Database.DatabaseConnection;
import com.mysql.jdbc.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ui.LandingJPanel;
import ui.MainJFrame;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;


/**
 *
 * @author Vaishnavi Choukwale
 */
public class myStudentCoursesJPanel extends javax.swing.JPanel {
    
    private String selectedNUID;
    private String selectedCourse;
    
    MainJFrame mainframe;
 

    /**
     * Creates new form myStudentCoursesJPanel
     */
    public myStudentCoursesJPanel(MainJFrame mainframe,String selectedNUID) {
        initComponents();
        
        
        this.mainframe = mainframe;
        this.selectedNUID = selectedNUID;
       
        displayCourseDataForStudent(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    class CourseInfo {
    private String grade;
    private String courseStatus;

    public CourseInfo(String grade, String courseStatus) {
        this.grade = grade;
        this.courseStatus = courseStatus;
    }

    public String getGrade() {
        return grade;
    }

    public String getCourseStatus() {
        return courseStatus;
    }
    }

    
    private void displayCourseDataForStudent(Integer CourseID) {
        DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
         model.setRowCount(0);
    // Handle any SQL exceptions that may occur.
    try {
    Connection connection = (Connection) DatabaseConnection.getConnection();
    int studentNUID = Integer.parseInt(selectedNUID); // Parse selectedNUID to an integer

    String sql1 = "SELECT courseid, grade, course_status FROM coursesregistered WHERE nuid = ?";
    String sql2 = "SELECT courseid, coursename, year, semester, professor, region, language FROM courses WHERE courseid IN (" + sql1 + ")";

   
    
     
     if (CourseID != null) {
            sql1 += " AND courseid = ?"; // Add the condition when nuid is provided
            }

            PreparedStatement preparedStatement1 = connection.prepareStatement(sql1);

        if (CourseID != null) {
         
     preparedStatement1.setInt(2,CourseID);
        }
      preparedStatement1.setInt(1, studentNUID);

    ResultSet resultSet1 = preparedStatement1.executeQuery();

    // Create a list to store courseid values from sql1
    List<Integer> courseIDs = new ArrayList<>();
    Map<Integer, Map<String, String>> courseInfoMap = new HashMap<>();

    while (resultSet1.next()) {
        int courseID = resultSet1.getInt("courseid");
        String grade = resultSet1.getString("grade");
        String courseStatus = resultSet1.getString("course_status");

        courseIDs.add(courseID);
        
        // Create a map to store grade and course status
        Map<String, String> gradeStatusMap = new HashMap<>();
        gradeStatusMap.put("grade", grade);
        gradeStatusMap.put("course_status", courseStatus);
        System.out.println(courseStatus +" courseStatus");
        
        courseInfoMap.put(courseID, gradeStatusMap);
    }

    preparedStatement1.close();

    if (!courseIDs.isEmpty()) {
        // Create a comma-separated string of placeholders for courseid values in sql2
        String courseIDPlaceholders = String.join(",", Collections.nCopies(courseIDs.size(), "?"));
        
        String combinedSQL = "SELECT courseid, coursename, year, semester, professor, region, language FROM courses WHERE courseid IN (" + courseIDPlaceholders + ")";
        PreparedStatement preparedStatement2 = connection.prepareStatement(combinedSQL);
        
        // Bind the courseid values to the placeholders in preparedStatement2
        int parameterIndex = 1;
        for (int courseID : courseIDs) {
            preparedStatement2.setInt(parameterIndex++, courseID);
        }

        ResultSet resultSet2 = preparedStatement2.executeQuery();

        

        while (resultSet2.next()) {
        String courseID = Integer.toString(resultSet2.getInt("courseid"));
        if(!courseID.isEmpty())
        {
        
        String courseName = resultSet2.getString("coursename");
        String year = resultSet2.getString("year");
        String semester = resultSet2.getString("semester");
        String professor = resultSet2.getString("professor");
        String region = resultSet2.getString("region");
        String language = resultSet2.getString("language");

        Map<String, String> gradeStatusMap = courseInfoMap.get(Integer.parseInt(courseID));

        // Create a row for the DefaultTableModel with the combined information
        Vector<String> row = new Vector<>();
        row.add(courseID);
        row.add(courseName);
        row.add(year);
        row.add(semester);
        row.add(professor);
        row.add(region);
        row.add(language);

         if (gradeStatusMap != null) {
             row.add(gradeStatusMap.get("course_status"));
        if (gradeStatusMap.get("grade") != null) {
            row.add(gradeStatusMap.get("grade"));  // Add grade from resultSet1 if not null
        } else {
            row.add("");  // No grade available
        }
         // Add course_status from resultSet1
    } else {
        row.add("");  // No grade available
        row.add("");  // No status available
    }

        model.addRow(row);
        }
    }


        resultSet2.close();
        preparedStatement2.close();
    } else {
        System.out.println("No courseid values found in the first query.");
        // Handle the case where no courseid values were found.
    }
} catch (SQLException e) {
    e.printStackTrace();
    // Handle any SQL exceptions that may occur.
}




    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnViewCourse = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CourseID", "Course", "Year", "Semester", "Professor", "Region", "Language", "Status", "Grades"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCourses.setDragEnabled(true);
        jScrollPane1.setViewportView(tblCourses);

        txtSearch.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(102, 102, 102));
        txtSearch.setText("Search..");
        txtSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnSearch.setBackground(new java.awt.Color(204, 255, 255));
        btnSearch.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(0, 102, 102));
        btnSearch.setText("Search");
        btnSearch.setBorder(null);
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnViewCourse.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnViewCourse.setForeground(new java.awt.Color(0, 102, 102));
        btnViewCourse.setText("View");
        btnViewCourse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnViewCourse.setBorderPainted(false);
        btnViewCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCourseActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 102, 51));
        btnBack.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back (1).png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.setContentAreaFilled(false);
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 245, Short.MAX_VALUE)
                        .addComponent(btnViewCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(584, 584, 584))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(btnViewCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(254, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 979, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 764, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCourseActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblCourses.getSelectedRow();
        
        if (selectedRow != -1) {
            // Get the NUID value from the first column of the selected row
        
            Object value = tblCourses.getValueAt(selectedRow, 0);
            
            selectedCourse = value.toString();
            ViewStudentCourse viewcourse = new ViewStudentCourse(mainframe,selectedNUID,selectedCourse);
            mainframe.setRightComponent(viewcourse);
            // Now you have the NUID value
            
        } else {
            // Handle the case where no row is selected
            System.out.println("No row selected.");
              JOptionPane.showMessageDialog(this, "No row selected.");
        }
        
        
        
        
    }//GEN-LAST:event_btnViewCourseActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        StudentLandingJPanel stulanding = new StudentLandingJPanel(mainframe,selectedNUID);
        mainframe.setRightComponent(stulanding);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
         if(!txtSearch.getText().trim().isEmpty())
         {
          Integer CourseID = Integer.parseInt(txtSearch.getText().trim()); // Get the NUID from the text field
          System.out.println(CourseID);
          displayCourseDataForStudent(CourseID);
         }
         else{
             displayCourseDataForStudent(null);
         }
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewCourse;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourses;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
