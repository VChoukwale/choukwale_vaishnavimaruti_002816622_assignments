/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package StudentWorkArea;

import Database.DatabaseConnection;
import com.mysql.jdbc.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import ui.MainJFrame;

/**
 *
 * @author Abhinav Uni
 */
public class RegisterCoursesJPanel extends javax.swing.JPanel {
    
    private String selectedNUID;
    private String status;
    MainJFrame mainframe;

    /**
     * Creates new form RegisterCoursesJPanel
     */
    public RegisterCoursesJPanel(MainJFrame mainframe,String selectedNUID) {
        this.selectedNUID = selectedNUID;
        this.mainframe = mainframe;
        initComponents();
        displayCourses(null);
        
        System.out.println(selectedNUID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void RegisterCourses(Integer courseid){
        try {
             Connection connection = (Connection)DatabaseConnection.getConnection();
            String sql = "INSERT INTO coursesregistered (courseid, nuid, course_status) VALUES (?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            
            // Replace these variables with actual values that you want to insert
            int courseID = courseid; // Replace with the actual course ID
            int nuid = Integer.parseInt(selectedNUID);    // Replace with the student's NUID
            String courseStatus = "InProgress"; // Replace with the desired course status
            System.out.println("courseID" + courseID);
            System.out.println("NUID" + nuid);
            

            preparedStatement.setInt(1, courseID);
            preparedStatement.setInt(2, nuid);
            preparedStatement.setString(3, courseStatus);

            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                // Insert was successful
                 displayCourses(null);
                JOptionPane.showMessageDialog(this, "Course Registration successfull.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Handle the case where no rows were inserted
                JOptionPane.showMessageDialog(this, "Error Registating for the course.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            preparedStatement.close();
        } catch (SQLException e) {
            e.printStackTrace(); // Handle any SQL exceptions that may occur
        }

        
    }
    
    public String getProfessorName(int courseID) {
    String professorName = null;

    try {
        Connection connection = (Connection) DatabaseConnection.getConnection();

        // Define the SQL query to retrieve professor name based on courseID
        String sql = "SELECT u.name FROM users u INNER JOIN courses c ON u.nuid = c.nuid WHERE c.courseid = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setInt(1, courseID);

        ResultSet resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            professorName = resultSet.getString("name");
        }

        resultSet.close();
        preparedStatement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle any SQL exceptions that may occur.
    }

    return professorName;
}
    
    public String updateCourseStatus(int courseID) {
    String status = "NotRegistered"; // Default status is "NotRegistered"

    try {
        Connection connection = (Connection) DatabaseConnection.getConnection();

        // Check the course_status in the coursesregistered table
        String checkStatusSql = "SELECT course_status FROM coursesregistered WHERE courseid = ? AND nuid = ?";
        PreparedStatement checkStatusStatement = connection.prepareStatement(checkStatusSql);
        checkStatusStatement.setInt(1, courseID);
        checkStatusStatement.setInt(2, Integer.parseInt(selectedNUID));

        ResultSet statusResult = checkStatusStatement.executeQuery();

        if (statusResult.next()) {
            // Course is registered, retrieve the course status
            String courseStatus = statusResult.getString("course_status");
            if ("InProgress".equals(courseStatus) || "Completed".equals(courseStatus)) {
                // Set the status variable to the retrieved course status
                status = courseStatus;
            }
        }

        statusResult.close();
        checkStatusStatement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        // Handle any SQL exceptions that may occur.
    }

    return status;
}



    
    private void displayCourses(Integer CourseID) {
        DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
         model.setRowCount(0);
        try {
            Connection connection = (Connection)DatabaseConnection.getConnection();
           
            String sql = "SELECT courseid, coursename, year, semester, region,language,course_rating,my_rating FROM courses";
            
//            preparedStatement.setInt(1, studentNUID);
            if (CourseID != null) {
            sql += " WHERE courseid = ?"; // Add the condition when nuid is provided
            }

            PreparedStatement preparedStatement = connection.prepareStatement(sql);

        if (CourseID != null) {
            preparedStatement.setInt(1, CourseID); // Set the nuid value if provided
        }

            ResultSet resultSet = preparedStatement.executeQuery();
            

            // Clear any existing rows in the table
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            
             Set<String> professors = new HashSet<>(); // To store unique professor names
             Set<String> years = new HashSet<>(); 
             Set<String> courses = new HashSet<>(); 

            // Add rows from the result set to the table
            while (resultSet.next()) {
                Vector<String> row = new Vector<>();
                Integer selectedCourse = Integer.parseInt(resultSet.getString("courseid"));
                row.add(resultSet.getString("courseid"));
                row.add(resultSet.getString("coursename"));
                courses.add(resultSet.getString("coursename"));
                row.add(resultSet.getString("year"));
                years.add(resultSet.getString("year"));
                row.add(resultSet.getString("semester"));
               
                
//                row.add(resultSet.getString("professor"));
                row.add(resultSet.getString("region"));
                row.add(resultSet.getString("language"));
                row.add(getProfessorName(selectedCourse));
                 professors.add(getProfessorName(selectedCourse));
                String courseRating = resultSet.getString("course_rating");
                String profRating = resultSet.getString("my_rating");
               
//                String professor = resultSet.getString("professor");
//                if (professor != null && !professor.isEmpty()) {
//                    row.add(professor);
//                }
                if (profRating != null && !profRating.isEmpty()) {
                    row.add(profRating);
                }
                else{
                    row.add("Not Available");
                }

                if (courseRating != null && !courseRating.isEmpty()) {
                    row.add(courseRating);
                }
                else{
                    row.add("Not Available");
                }
                
                row.add(updateCourseStatus(selectedCourse));
                model.addRow(row);
            }
            
             for (String professorName : professors) {
                System.out.println("ComboBox . " + professorName);
                ProfessorComboBox.addItem(professorName);
            }
             
             for (String Years : years) {
                System.out.println("ComboBox . " + Years);
                YearComboBox.addItem(Years);
            }
             
              for (String courses2 : courses) {
                System.out.println("ComboBox . " + courses2);
                CourseComboBox.addItem(courses2);
            }
             
             
//              for (String Semester : semesters) {
//                System.out.println("ComboBox . " + semesters);
//                YearComboBox.addItem(Semester);
//            }
//             

            resultSet.close();
            preparedStatement.close();
//            DatabaseConnection.closeConnection(connection);

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving course data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void filterTableByProfessor(String selectedProfessor) {
        YearComboBox.setSelectedIndex(0);
          SemesterComboBox.setSelectedIndex(0);
          LanguageComboBox.setSelectedIndex(0);
          CourseComboBox.setSelectedIndex(0);
          RegionComboBox.setSelectedIndex(0);
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblCourses.setRowSorter(sorter);
 
    if (selectedProfessor == null || selectedProfessor.isEmpty() || selectedProfessor.equals("--Professor--")) {
        sorter.setRowFilter(null); // Remove any existing filter
    } 
   
        

    else {
        
        sorter.setRowFilter(RowFilter.regexFilter(selectedProfessor, 6)); // Filter based on the professor column (index 4)
        ProfessorComboBox.setSelectedItem(selectedProfessor);
    }
}
    
     private void filterTableByYear(String selectedProfessor) {
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblCourses.setRowSorter(sorter);
 
    if (selectedProfessor == null || selectedProfessor.isEmpty() || selectedProfessor.equals("--Year--")) {
        sorter.setRowFilter(null); // Remove any existing filter
    } 
   
        

    else {
        
        sorter.setRowFilter(RowFilter.regexFilter(selectedProfessor, 2)); // Filter based on the professor column (index 4)
        YearComboBox.setSelectedItem(selectedProfessor);
    }
}
     
     private void filterTableBySemester(String selectedProfessor) {
         YearComboBox.setSelectedIndex(0);
          LanguageComboBox.setSelectedIndex(0);
          ProfessorComboBox.setSelectedIndex(0);
          CourseComboBox.setSelectedIndex(0);
          RegionComboBox.setSelectedIndex(0);
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblCourses.setRowSorter(sorter);
 
    if (selectedProfessor == null || selectedProfessor.isEmpty() || selectedProfessor.equals("--Semester--")) {
        sorter.setRowFilter(null); // Remove any existing filter
        System.out.print("hello1");
    } 
   
        

    else {
        System.out.print("hello2");
      
        sorter.setRowFilter(RowFilter.regexFilter(selectedProfessor, 3)); // Filter based on the professor column (index 4)
        SemesterComboBox.setSelectedItem(selectedProfessor);
    }
}
     
     private void filterTableByRegion(String selectedProfessor) {
          YearComboBox.setSelectedIndex(0);
          SemesterComboBox.setSelectedIndex(0);
          LanguageComboBox.setSelectedIndex(0);
          ProfessorComboBox.setSelectedIndex(0);
          CourseComboBox.setSelectedIndex(0);
          
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblCourses.setRowSorter(sorter);
 
    if (selectedProfessor == null || selectedProfessor.isEmpty() || selectedProfessor.equals("--Region--")) {
        sorter.setRowFilter(null); // Remove any existing filter
        System.out.print("hello1");
    } 
   
        

    else {
        System.out.print("hello2");
         
        sorter.setRowFilter(RowFilter.regexFilter(selectedProfessor, 4)); // Filter based on the professor column (index 4)
        RegionComboBox.setSelectedItem(selectedProfessor);
    }
}
     
      private void filterTableByLanguage(String selectedProfessor) {
          YearComboBox.setSelectedIndex(0);
          SemesterComboBox.setSelectedIndex(0);
         
          ProfessorComboBox.setSelectedIndex(0);
          CourseComboBox.setSelectedIndex(0);
          RegionComboBox.setSelectedIndex(0);
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblCourses.setRowSorter(sorter);
 
    if (selectedProfessor == null || selectedProfessor.isEmpty() || selectedProfessor.equals("--Language--")) {
        sorter.setRowFilter(null); // Remove any existing filter
        System.out.print("hello1");
    } 
   
        

    else {
        System.out.print("hello2");
        
        sorter.setRowFilter(RowFilter.regexFilter(selectedProfessor, 5)); // Filter based on the professor column (index 4)
        LanguageComboBox.setSelectedItem(selectedProfessor);
    }
}
      
        private void filterTableByCourse(String selectedProfessor) {
            YearComboBox.setSelectedIndex(0);
          SemesterComboBox.setSelectedIndex(0);
          LanguageComboBox.setSelectedIndex(0);
          ProfessorComboBox.setSelectedIndex(0);
          RegionComboBox.setSelectedIndex(0);
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
    tblCourses.setRowSorter(sorter);
 
    if (selectedProfessor == null || selectedProfessor.isEmpty() || selectedProfessor.equals("--Course--")) {
        sorter.setRowFilter(null); // Remove any existing filter
        System.out.print("hello1");
    } 
   
        

    else {
        System.out.print("hello2");
        
        sorter.setRowFilter(RowFilter.regexFilter(selectedProfessor, 1)); // Filter based on the professor column (index 4)
        CourseComboBox.setSelectedItem(selectedProfessor);
    }
}
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        YearComboBox = new javax.swing.JComboBox<>();
        SemesterComboBox = new javax.swing.JComboBox<>();
        ProfessorComboBox = new javax.swing.JComboBox<>();
        RegionComboBox = new javax.swing.JComboBox<>();
        CourseComboBox = new javax.swing.JComboBox<>();
        LanguageComboBox = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));

        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CourseID", "Course", "Year", "Semester", "Region", "Language", "Professor", "Professor Rating", "Course Rating", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourses);

        txtSearch.setFont(new java.awt.Font("Segoe UI", 2, 8)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(102, 102, 102));
        txtSearch.setText("Search..");
        txtSearch.setBorder(null);
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        YearComboBox.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        YearComboBox.setForeground(new java.awt.Color(0, 102, 102));
        YearComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Year--", "2022", "2023", "2024" }));
        YearComboBox.setBorder(null);
        YearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearComboBoxActionPerformed(evt);
            }
        });

        SemesterComboBox.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        SemesterComboBox.setForeground(new java.awt.Color(0, 102, 102));
        SemesterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Semester--", "Fall", "Spring" }));
        SemesterComboBox.setBorder(null);
        SemesterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SemesterComboBoxActionPerformed(evt);
            }
        });

        ProfessorComboBox.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        ProfessorComboBox.setForeground(new java.awt.Color(0, 102, 102));
        ProfessorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Professor--" }));
        ProfessorComboBox.setBorder(null);
        ProfessorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfessorComboBoxActionPerformed(evt);
            }
        });

        RegionComboBox.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        RegionComboBox.setForeground(new java.awt.Color(0, 102, 102));
        RegionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Region--", "Boston", "New York", "Seattle" }));
        RegionComboBox.setBorder(null);
        RegionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegionComboBoxActionPerformed(evt);
            }
        });

        CourseComboBox.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        CourseComboBox.setForeground(new java.awt.Color(0, 102, 102));
        CourseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Course--" }));
        CourseComboBox.setBorder(null);
        CourseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseComboBoxActionPerformed(evt);
            }
        });

        LanguageComboBox.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        LanguageComboBox.setForeground(new java.awt.Color(0, 102, 102));
        LanguageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Language--", "English", "Chinese", "Spanish" }));
        LanguageComboBox.setBorder(null);
        LanguageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LanguageComboBoxActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(204, 255, 255));
        btnSearch.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(0, 102, 102));
        btnSearch.setText("Search");
        btnSearch.setBorder(null);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRegister.setBackground(new java.awt.Color(0, 102, 0));
        btnRegister.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setText("Register");
        btnRegister.setBorder(null);
        btnRegister.setBorderPainted(false);
        btnRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(255, 102, 51));
        btnBack.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back (1).png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.setContentAreaFilled(false);
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SemesterComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(YearComboBox, 0, 144, Short.MAX_VALUE)
                    .addComponent(ProfessorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RegionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CourseComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRegister)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 947, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {YearComboBox, btnRegister, btnSearch});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(YearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ProfessorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RegionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRegister)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {YearComboBox, btnBack, btnRegister, btnSearch, txtSearch});

    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        StudentLandingJPanel stulanding = new StudentLandingJPanel(mainframe,selectedNUID);
        mainframe.setRightComponent(stulanding);
       
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblCourses.getSelectedRow();
        
        if (selectedRow != -1) {
            // Get the NUID value from the first column of the selected row
        
            Object value = tblCourses.getValueAt(selectedRow, 0);
            Integer courseid = Integer.parseInt(value.toString());
            
            RegisterCourses(courseid);
            
            // Now you have the NUID value
            
        } else {
            // Handle the case where no row is selected
            System.out.println("No row selected.");
              JOptionPane.showMessageDialog(this, "No row selected.");
        }
         
        
        
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if(!txtSearch.getText().trim().isEmpty())
         {
          Integer CourseID = Integer.parseInt(txtSearch.getText().trim()); // Get the NUID from the text field
          System.out.println(CourseID);
           displayCourses(CourseID);
         }
         else{
             displayCourses(null);
         }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void ProfessorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfessorComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedProfessor = (String) ProfessorComboBox.getSelectedItem();
         
         filterTableByProfessor(selectedProfessor);
    }//GEN-LAST:event_ProfessorComboBoxActionPerformed

    private void YearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearComboBoxActionPerformed
        // TODO add your handling code here:
         String selectedYear = (String) YearComboBox.getSelectedItem();
         
         filterTableByYear(selectedYear);
    }//GEN-LAST:event_YearComboBoxActionPerformed

    private void SemesterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SemesterComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedSemester = (String) SemesterComboBox.getSelectedItem();
         
         filterTableBySemester(selectedSemester);
        
    }//GEN-LAST:event_SemesterComboBoxActionPerformed

    private void RegionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegionComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedRegion = (String) RegionComboBox.getSelectedItem();
         
         filterTableByRegion(selectedRegion);
    }//GEN-LAST:event_RegionComboBoxActionPerformed

    private void LanguageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LanguageComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedLanguage = (String) LanguageComboBox.getSelectedItem();
         
         filterTableByLanguage(selectedLanguage);
    }//GEN-LAST:event_LanguageComboBoxActionPerformed

    private void CourseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseComboBoxActionPerformed
        // TODO add your handling code here:
         String selectedCourse = (String) CourseComboBox.getSelectedItem();
         
         filterTableByCourse(selectedCourse);
    }//GEN-LAST:event_CourseComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CourseComboBox;
    private javax.swing.JComboBox<String> LanguageComboBox;
    private javax.swing.JComboBox<String> ProfessorComboBox;
    private javax.swing.JComboBox<String> RegionComboBox;
    private javax.swing.JComboBox<String> SemesterComboBox;
    private javax.swing.JComboBox<String> YearComboBox;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourses;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
