/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package StudentWorkArea;

import Database.DatabaseConnection;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.*;
import javax.swing.JOptionPane;
import ui.LandingJPanel;
import ui.MainJFrame;
import com.itextpdf.text.Chunk;
import com.mysql.jdbc.Connection;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.mysql.jdbc.Connection;

/**
 *
 * @author Abhinav Uni
 */
public class StudentTranscriptJPanel extends javax.swing.JPanel {
    
    MainJFrame mainframe;
    private String selectedNUID;

    /**
     * Creates new form StudentLandingJPanel
     */
    public StudentTranscriptJPanel(MainJFrame mainframe,String selectedNUID) {
        this.selectedNUID = selectedNUID;
        initComponents();
        
        this.mainframe = mainframe;
        System.out.println(selectedNUID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogout = new javax.swing.JButton();
        btnMyTranscript = new javax.swing.JButton();
        btnDownloadTrans = new javax.swing.JButton();
        txtNUID = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));

        btnLogout.setBackground(new java.awt.Color(255, 0, 0));
        btnLogout.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(255, 255, 255));
        btnLogout.setText("Logout");
        btnLogout.setBorder(null);
        btnLogout.setBorderPainted(false);
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnMyTranscript.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnMyTranscript.setForeground(new java.awt.Color(0, 102, 102));
        btnMyTranscript.setText("Get Transcript");
        btnMyTranscript.setBorder(null);
        btnMyTranscript.setBorderPainted(false);
        btnMyTranscript.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMyTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMyTranscriptActionPerformed(evt);
            }
        });

        btnDownloadTrans.setFont(new java.awt.Font("Segoe UI Variable", 1, 13)); // NOI18N
        btnDownloadTrans.setForeground(new java.awt.Color(0, 102, 102));
        btnDownloadTrans.setText("Download Transcript");
        btnDownloadTrans.setBorder(null);
        btnDownloadTrans.setBorderPainted(false);
        btnDownloadTrans.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDownloadTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadTransActionPerformed(evt);
            }
        });

        txtNUID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNUIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMyTranscript, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(221, 221, 221))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(143, 143, 143)
                    .addComponent(txtNUID, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnDownloadTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(144, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(btnMyTranscript, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(228, 228, 228)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNUID, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDownloadTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(229, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        
        LandingJPanel landingpage = new LandingJPanel(mainframe);
        mainframe.setRightComponent(landingpage);
        
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnMyTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMyTranscriptActionPerformed
        // TODO add your handling code here:
        Integer nuidValue = Integer.parseInt(selectedNUID); // Replace with the actual NUID

        try {
            System.out.println("selectedNUID" + selectedNUID);
             Connection connection = (Connection)DatabaseConnection.getConnection();
            // Prepare the SQL statement with a parameter
            String updateGraduationStatusSql = "UPDATE student2 SET transcript = ? WHERE nuid = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(updateGraduationStatusSql);

            // Set the NUID parameter
            preparedStatement.setString(1, "requested");
            preparedStatement.setInt(2, nuidValue);

            // Execute the update
            int rowsAffected = preparedStatement.executeUpdate();
            preparedStatement.close();

            if (rowsAffected > 0) {
                System.out.println("Transcript status updated to 'Requested' for NUID: " + nuidValue);
            } else {
                System.out.println("No records were updated. NUID not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close the resources (connection, statement, etc.) in a real application
        }
        TranscriptJPanel mytranscript = new TranscriptJPanel(mainframe);
        mainframe.setRightComponent(mytranscript);
    }//GEN-LAST:event_btnMyTranscriptActionPerformed

    private void btnDownloadTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadTransActionPerformed
        
        try {
            Connection connection = (Connection) DatabaseConnection.getConnection();
            String nuid = txtNUID.getText();

            if (nuid.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid NUID.");
                return;
            }

           
            String transcriptName = "/Users/abhilashkumargorle/Documents/AED-Project/Transcript_" + nuid + ".pdf";
            File existingTranscript = new File(transcriptName);
            if (existingTranscript.exists()) {
                JOptionPane.showMessageDialog(this, "Transcript is already downloaded.");
                return;
            }

            String sql = "SELECT u.nuid, u.name AS student_name, GROUP_CONCAT(c.coursename) AS courses, "
                    + "GROUP_CONCAT(cr.course_status) AS course_statuses, GROUP_CONCAT(cr.grade) AS grades "
                    + "FROM users u "
                    + "INNER JOIN coursesregistered cr ON u.nuid = cr.nuid "
                    + "INNER JOIN courses c ON cr.courseid = c.courseid "
                    + "WHERE u.nuid = ? AND cr.course_status = 'completed';";
            try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setString(1, nuid);
                ResultSet rs = preparedStatement.executeQuery();

                if (rs.next()) {
                    String studentNUID = rs.getString("nuid");
                    String studentName = rs.getString("student_name");
                    String courseNames = rs.getString("courses");
                    String courseStatuses = rs.getString("course_statuses");
                    String grades = rs.getString("grades");

                
                    Document document = new Document();
                    PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(transcriptName));
                    document.open();
                    
            
                    Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 24, BaseColor.DARK_GRAY);
                    Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE);
                    Font cellFont = FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK);

           
                    Paragraph title = new Paragraph("Student Transcript", titleFont);
                    title.setAlignment(Element.ALIGN_CENTER);
                    document.add(title);
                    document.add(Chunk.NEWLINE);

                 
                    document.add(new Paragraph("NUID: " + studentNUID, cellFont));
                    document.add(new Paragraph("Student Name: " + studentName, cellFont));

                
                    PdfPTable table = new PdfPTable(3);
                    table.setWidthPercentage(100);
                    table.setSpacingBefore(20);

                  
                    PdfPCell headerCell = new PdfPCell(new Phrase("Course", headerFont));
                    headerCell.setBackgroundColor(BaseColor.LIGHT_GRAY);  
                    table.addCell(headerCell);
                    headerCell = new PdfPCell(new Phrase("Status", headerFont));
                    headerCell.setBackgroundColor(BaseColor.LIGHT_GRAY); 
                    table.addCell(headerCell);
                    headerCell = new PdfPCell(new Phrase("Grade", headerFont));
                    headerCell.setBackgroundColor(BaseColor.LIGHT_GRAY); 
                    table.addCell(headerCell);

                    String[] coursesArray = courseNames.split(",");
                    String[] statusesArray = courseStatuses.split(",");
                    String[] gradesArray = grades.split(",");
                    
                    cellFont.setColor(BaseColor.BLACK);

                    
                    for (int i = 0; i < coursesArray.length; i++) {
                        PdfPCell cell = new PdfPCell(new Phrase(coursesArray[i], cellFont));
                        cell.setBackgroundColor((i % 2 == 0) ? BaseColor.WHITE : new BaseColor(173, 216, 230));
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(statusesArray[i], cellFont));
                        cell.setBackgroundColor((i % 2 == 0) ? BaseColor.WHITE : new BaseColor(173, 216, 230)); 
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase(gradesArray[i], cellFont));
                        cell.setBackgroundColor((i % 2 == 0) ? BaseColor.WHITE : new BaseColor(173, 216, 230)); 
                        table.addCell(cell);
                     }

                    document.add(table);
                   
                    document.add(Chunk.NEWLINE);
                    
                   
                    String gpaSql = "SELECT gpa FROM student2 WHERE nuid = ?;";
                    try (PreparedStatement gpaStatement = connection.prepareStatement(gpaSql)) {
                        gpaStatement.setString(1, studentNUID);
                        ResultSet gpaResult = gpaStatement.executeQuery();

                        if (gpaResult.next()) {
                            float gpa = gpaResult.getFloat("gpa");

                            
                            Paragraph gpaParagraph = new Paragraph("GPA: " + gpa, cellFont);
                            document.add(gpaParagraph);
                    }
                }
                
                    document.close();
                    writer.close();

                   JOptionPane.showMessageDialog(this, "Transcript Downloaded Successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "No data found for the provided NUID.");
            }
            txtNUID.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnDownloadTransActionPerformed

    private void txtNUIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNUIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNUIDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownloadTrans;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMyTranscript;
    private javax.swing.JTextField txtNUID;
    // End of variables declaration//GEN-END:variables
}
